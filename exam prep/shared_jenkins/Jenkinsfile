pipeline
{
  environment
  {
    DOCKERHUB_CREDENTIALS=credentials('docker-hub')
    MYSQL_ROOT_PASSWORD="Exam-2021"
    DO_NETWORK="app-net"
  }

  agent
  {
    label 'docker-node'
  }

  stages
  {
    stage('Clone Repo')
    {
      steps
      {
        git branch: 'master', url: 'http://192.168.56.12:3000/douser/exam.git'
      }
    }

    stage('Build images')
    {
      steps
      {
        sh 'docker image rm img-consumer || echo "Image img-consumer did not exist, nothing to remove."'
        sh 'cd consumer ; docker image build -t img-consumer .'

        sh 'docker image rm img-producer || echo "Image img-producer did not exist, nothing to remove."'
        sh 'cd producer ; docker image build -t img-producer .'

        sh 'docker image rm img-storage || echo "Image img-storage did not exist, nothing to remove."'
        sh 'cd storage ; docker image build -t img-storage .'
      }
    }

    stage('Create docker network $DO_NETWORK')
    {
      steps
      {
        sh 'docker network inspect $DO_NETWORK >/dev/null 2>&1 || docker network create $DO_NETWORK'
      }
    }

    stage('Publishing images to Docker Hub')
    {
      steps
      {
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'

        sh 'docker image rm ivelin1936/img-consumer || true'
        sh 'docker image tag img-consumer ivelin1936/img-consumer'
        sh 'docker push ivelin1936/img-consumer'

        sh 'docker image rm ivelin1936/img-producer || true'
        sh 'docker image tag img-producer ivelin1936/img-producer'
        sh 'docker push ivelin1936/img-producer

        sh 'docker image rm ivelin1936/img-storage || true'
        sh 'docker image tag img-storage ivelin1936/img-storage'
        sh 'docker push ivelin1936/img-storage'
      }
    }

    stage('Deploy the application')
    {
      steps
      {
        sh 'docker container rm -f dob-storage || true'
        sh 'docker container run -d --name dob-storage --net $DO_NETWORK -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD img-storage'

        sh 'docker container rm -f dob-producer || true'
        sh 'docker container run -d --name dob-producer --net $DO_NETWORK img-producer'

        sh 'docker container rm -f dob-consumer || true'
        sh 'docker container run -d --name dob-consumer --net $DO_NETWORK -p 8080:5000 img-consumer'
      }
    }
  }

  post
  {
    always
    {
      cleanWs()
    }
  }
}
